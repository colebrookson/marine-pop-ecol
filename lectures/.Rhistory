# create matrix
whale_matrix = matrix(data = c(c(0, 0, 0, 0),
c(0.92, 0.86, 0, 0),
c(0, 0.08, 0.8, 0.75),
c(0, 0.02, 0.19, 0)),
nrow = 4, ncol = 4,
byrow = TRUE)
# create matrix
whale_matrix = matrix(data = c(c(0, 0, 0, 0),
c(0.92, 0.86, 0, 0),
c(0, 0.08, 0.8, 0.75),
c(0, 0.02, 0.19, 0)),
nrow = 4, ncol = 4,
byrow = TRUE)
# function to update birth rate
update_birth_rate = function(matrix) {
# pass the row number and column number of the matrix for R to find:
sRM = matrix[4,3]
sMR = matrix[3,4]
# set birth rate equation
b = 0.5 * sRM * (sMR^0.5)
# update the birth rate location
matrix[1,4]
# return the matrix
return(matrix)
}
whale_matrix = update_birth_rate(whale_matrix)
View(whale_matrix)
matrix = whale_matrix
# pass the row number and column number of the matrix for R to find:
sRM = matrix[4,3]
sMR = matrix[3,4]
# set birth rate equation
b = 0.5 * sRM * (sMR^0.5)
# update the birth rate location
matrix[1,4]
rm(b, sMR, sRM, matrix)
library(tidyverse)
# create matrix
whale_matrix = matrix(data = c(c(0, 0, 0, 0),
c(0.92, 0.86, 0, 0),
c(0, 0.08, 0.8, 0.75),
c(0, 0.02, 0.19, 0)),
nrow = 4, ncol = 4,
byrow = TRUE)
# function to update birth rate
update_birth_rate = function(matrix) {
# pass the row number and column number of the matrix for R to find:
sRM = matrix[4,3]
sMR = matrix[3,4]
# set birth rate equation
b = 0.5 * sRM * (sMR^0.5)
# update the birth rate location
matrix[1,4] = b
# return the matrix
return(matrix)
}
whale_matrix = update_birth_rate(whale_matrix)
turtle_stage_matrix = matrix(c(c(0, 0, 0, 4.665, 61.896),
c(0.675,  0.703, 0, 0, 0),
c(0, 0.047, 0.657, 0, 0),
c(0, 0, 0.019, 0.682, 0),
c(0, 0, 0, 0.061, 0.8091)),
5,5,
byrow = TRUE)
matrix_simulation = function(transition_matrix,
initial_pop,
timesteps) {
# loop to update matrix
updated_pop = initial_pop
for(i in 2:timesteps) {
updated_pop = transition_matrix %*% updated_pop
}
return(updated_pop_plot)
}
# run model with initial of 100 adults for 100 time steps
sim_100 = matrix_simulation(turtle_stage_matrix,
c(0,0,0,0,100),
100)
matrix_simulation = function(transition_matrix,
initial_pop,
timesteps) {
# loop to update matrix
updated_pop = initial_pop
for(i in 2:timesteps) {
updated_pop = transition_matrix %*% updated_pop
}
return(updated_pop)
}
# run model with initial of 100 adults for 100 time steps
sim_100 = matrix_simulation(turtle_stage_matrix,
c(0,0,0,0,100),
100)
# make matrix of abundance over 100 years
abundance_df = function(transition_matrix,
initial_pop,
timesteps){
pop1 = matrix(rep(0,5*timesteps), 5, timesteps)
pop1[,1] = initial_pop
for(i in 2:timesteps) {
pop1[,i] = (transition_matrix %*% pop1[,i-1])
}
pop1_for_plot = data.frame(pop = c((pop1[1,]), (pop1[2,]), (pop1[3,]),
(pop1[4,]),(pop1[5,])),
gen = c(rep('Eggs/hatchlings', timesteps),
rep('Small juveniles', timesteps),
rep('Large juveniles', timesteps),
rep('Subadults', timesteps),
rep('Adults', timesteps)),
ts = rep(c(1:timesteps), 5))
}
pop_100_yrs = abundance_df(turtle_stage_matrix,
c(0,0,0,0,100),
100)
stage_timeseries = ggplot(data = pop_100_yrs) +
geom_line(aes(x = ts, y = pop, colour = gen), size = 1.1) +
theme_bw()
stage_timeseries
# create matrix
whale_matrix = matrix(data = c(c(0, 0, 0, 0),
c(0.92, 0.86, 0, 0),
c(0, 0.08, 0.8, 0.75),
c(0, 0.02, 0.19, 0)),
nrow = 4, ncol = 4,
byrow = TRUE)
whale_eigen = eigen(whale_matrix)
View(whale_eigen)
?eigen
whale_eigen[2]
whale_eigen[,1]
whale_eigen$vectors[,1]
whale_eigen$vectors[,1]/sum(whale_eigen$vectors[,1])
# create matrix
whale_matrix = matrix(data = c(c(0, 0, 0, 0),
c(0.92, 0.86, 0, 0),
c(0, 0.08, 0.8, 0.75),
c(0, 0.02, 0.19, 0)),
nrow = 4, ncol = 4,
byrow = TRUE,
dimnames = list(c("calf", "immature", "matrue", "adult"),
c("calf", "immature", "matrue", "adult")))
# left eigenvector:
w = eigen(whale_matrix)$vectors
v = Conj(solve(w))
# sensativity matrix
senmat = Re(v[1,] %*% t(w[,1]))
senmat
whale_matrix = update_birth_rate(whale_matrix)
# left eigenvector:
w = eigen(whale_matrix)$vectors
v = Conj(solve(w))
# sensativity matrix
senmat = Re(v[1,] %*% t(w[,1]))
senmat
# elasticity matrix
emat = (1/(Re(eigen(whale_matrix$values[1])))) * senmat * whale_matrix
# elasticity matrix
emat = (1/(Re(eigen(whale_matrix)$values[1]))) * senmat * whale_matrix
emat
mat = whale_matrix
install.packages("popbio")
library(popbio)
sensitivity(mat, zero = FALSE)
?sensitivity
elasticity(mat)
emat
elasticity(mat)
sumfec <- sum(emat[1,2:3])
sumfec
emat
mat <- giraffe
giraffe <- matrix(c(0, 0, 0.24, 0.57, 0, 0, 0, 0.79, 0.84), nrow=3, byrow=TRUE,
dimnames=list(c("calf","subadult","adult"),
c("calf","subadult","adult")))
mat <- giraffe
sumfec <- sum(emat[1,2:3])
sumfec
matrix_simulation = function(transition_matrix,
initial_pop,
time_steps) {
# set a loop to indicate the updated population
updated_pop = iniitial_pop
for(i in 2:timesteps) {
updated_pop = transition_matrix %*% updated_pop
}
return(updated_pop)
}
# run model with initial of 100 adults for 100 time steps
sim_100 = matrix_simulation(whale_matrix,
c(0,0,0,0,100),
100)
matrix_simulation = function(transition_matrix,
initial_pop,
time_steps) {
# set a loop to indicate the updated population
updated_pop = iniitial_pop
for(i in 2:timesteps) {
updated_pop = transition_matrix %*% updated_pop
}
return(updated_pop)
}
# run model with initial of 100 adults for 100 time steps
sim_100 = matrix_simulation(whale_matrix,
c(0,0,0,0,100),
100)
matrix_simulation = function(transition_matrix,
initial_pop,
time_steps) {
# set a loop to indicate the updated population
updated_pop = initial_pop
for(i in 2:timesteps) {
updated_pop = transition_matrix %*% updated_pop
}
return(updated_pop)
}
# run model with initial of 100 adults for 100 time steps
sim_100 = matrix_simulation(whale_matrix,
c(0,0,0,0,100),
100)
matrix_simulation = function(transition_matrix,
initial_pop,
time_steps) {
# set a loop to indicate the updated population
updated_pop = initial_pop
for(i in 2:time_steps) {
updated_pop = transition_matrix %*% updated_pop
}
return(updated_pop)
}
# run model with initial of 100 adults for 100 time steps
sim_100 = matrix_simulation(whale_matrix,
c(0,0,0,0,100),
100)
whale_matrix
initial_pop = c(0,0,0,0,100)
# set a loop to indicate the updated population
updated_pop = initial_pop
updated_pop = transition_matrix %*% updated_pop
transition_matrix = whale_matrix
updated_pop = transition_matrix %*% updated_pop
transition_matrix
updated_pop
initial_pop = c(0,0,0,100)
updated_pop = transition_matrix %*% updated_pop
iniital_pop
initial_pop
transition_matrix
transition_matrix %*% updated_pop
# create matrix
whale_matrix = matrix(data = c(c(0, 0, 0, 0),
c(0.92, 0.86, 0, 0),
c(0, 0.08, 0.8, 0.75),
c(0, 0.02, 0.19, 0)),
nrow = 4, ncol = 4,
byrow = TRUE)
# function to update birth rate
update_birth_rate = function(matrix) {
# pass the row number and column number of the matrix for R to find:
sRM = matrix[4,3]
sMR = matrix[3,4]
# set birth rate equation
b = 0.5 * sRM * (sMR^0.5)
# update the birth rate location
matrix[1,4] = b
# return the matrix
return(matrix)
}
whale_matrix = update_birth_rate(whale_matrix)
whale_matrix
updated_pop = transition_matrix %*% updated_pop
# set a loop to indicate the updated population
updated_pop = initial_pop
updated_pop = transition_matrix %*% updated_pop
matrix_simulation = function(transition_matrix,
initial_pop,
time_steps) {
# set a loop to indicate the updated population
updated_pop = initial_pop
for(i in 2:time_steps) {
updated_pop = transition_matrix %*% updated_pop
}
return(updated_pop)
}
# run model with initial of 100 adults for 100 time steps
sim_100 = matrix_simulation(whale_matrix,
c(0,0,0,100),
100)
# make matrix of abundance over 100 years
abundance_df = function(transition_matrix,
initial_pop,
timesteps){
pop1 = matrix(rep(0,5*timesteps), 5, timesteps)
pop1[,1] = initial_pop
for(i in 2:timesteps) {
pop1[,i] = (transition_matrix %*% pop1[,i-1])
}
pop1_for_plot = data.frame(pop = c((pop1[1,]), (pop1[2,]), (pop1[3,]),
(pop1[4,]),(pop1[5,])),
gen = c(rep('Eggs/hatchlings', timesteps),
rep('Small juveniles', timesteps),
rep('Large juveniles', timesteps),
rep('Subadults', timesteps),
rep('Adults', timesteps)),
ts = rep(c(1:timesteps), 5))
}
# make matrix of abundance over 100 years
abundance_df = function(transition_matrix,
initial_pop,
timesteps){
pop1 = matrix(rep(0,5*timesteps), 4, timesteps)
pop1[,1] = initial_pop
for(i in 2:timesteps) {
pop1[,i] = (transition_matrix %*% pop1[,i-1])
}
pop1_for_plot = data.frame(pop = c((pop1[1,]), (pop1[2,]), (pop1[3,]),
(pop1[4,])),
gen = c(rep('Calves (Females)', timesteps),
rep('Immature Females', timesteps),
rep('Mature Females', timesteps),
rep('Reproducing Females', timesteps)),
ts = rep(c(1:timesteps), 5))
}
pop_100_yrs = abundance_df(turtle_stage_matrix,
c(0,0,0,100),
100)
# make matrix of abundance over 100 years
abundance_df = function(transition_matrix,
initial_pop,
timesteps){
pop1 = matrix(rep(0,5*timesteps), 4, timesteps)
pop1[,1] = initial_pop
for(i in 2:timesteps) {
pop1[,i] = (transition_matrix %*% pop1[,i-1])
}
pop1_for_plot = data.frame(pop = c((pop1[1,]), (pop1[2,]), (pop1[3,]),
(pop1[4,])),
gen = c(rep('Calves (Females)', timesteps),
rep('Immature Females', timesteps),
rep('Mature Females', timesteps),
rep('Reproducing Females', timesteps)),
ts = rep(c(1:timesteps), 4))
}
pop_100_yrs = abundance_df(turtle_stage_matrix,
c(0,0,0,100),
100)
# make matrix of abundance over 100 years
abundance_df = function(transition_matrix,
initial_pop,
timesteps){
pop1 = matrix(rep(0,4*timesteps), 4, timesteps)
pop1[,1] = initial_pop
for(i in 2:timesteps) {
pop1[,i] = (transition_matrix %*% pop1[,i-1])
}
pop1_for_plot = data.frame(pop = c((pop1[1,]), (pop1[2,]), (pop1[3,]),
(pop1[4,])),
gen = c(rep('Calves (Females)', timesteps),
rep('Immature Females', timesteps),
rep('Mature Females', timesteps),
rep('Reproducing Females', timesteps)),
ts = rep(c(1:timesteps), 4))
}
pop_100_yrs = abundance_df(turtle_stage_matrix,
c(0,0,0,100),
100)
timesteps = 100
pop1 = matrix(rep(0,4*timesteps), 4, timesteps)
pop1
pop1[,1] = initial_pop
for(i in 2:timesteps) {
pop1[,i] = (transition_matrix %*% pop1[,i-1])
}
pop1_for_plot = data.frame(pop = c((pop1[1,]), (pop1[2,]), (pop1[3,]),
(pop1[4,])),
gen = c(rep('Calves (Females)', timesteps),
rep('Immature Females', timesteps),
rep('Mature Females', timesteps),
rep('Reproducing Females', timesteps)),
ts = rep(c(1:timesteps), 4))
pop1_for_plot
pop1
pop1_for_plot = data.frame(pop = c((pop1[1,]), (pop1[2,]), (pop1[3,]),
(pop1[4,])),
gen = c(rep('Calves (Females)', timesteps),
rep('Immature Females', timesteps),
rep('Mature Females', timesteps),
rep('Reproducing Females', timesteps)),
ts = rep(c(1:timesteps), 4))
pop1_for_plot
View(pop1_for_plot)
stage_timeseries = ggplot(data = pop_100_yrs) +
geom_line(aes(x = ts, y = pop, colour = gen), size = 1.1) +
theme_bw() +
theme(
panel.grid = element_blank()
) +
scale_colour_manual('Stage', values = pnw_palette('Bay', 5)) +
labs(x = 'Time (years)', y = 'Abundance')
stage_timeseries = ggplot(data = pop_100_yrs) +
geom_line(aes(x = ts, y = pop, colour = gen), size = 1.1) +
theme_bw() +
theme(
panel.grid = element_blank()
) +
#scale_colour_manual('Stage', values = pnw_palette('Bay', 5)) +
labs(x = 'Time (years)', y = 'Abundance')
stage_timeseries
stage_timeseries = ggplot(data = pop1_for_plot) +
geom_line(aes(x = ts, y = pop, colour = gen), size = 1.1) +
theme_bw() +
theme(
panel.grid = element_blank()
) +
#scale_colour_manual('Stage', values = pnw_palette('Bay', 5)) +
labs(x = 'Time (years)', y = 'Abundance')
stage_timeseries
